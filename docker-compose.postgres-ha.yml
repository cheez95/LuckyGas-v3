version: '3.8'

# PostgreSQL High Availability Setup with Streaming Replication
# This configuration provides:
# - Primary/Replica setup with automatic failover
# - Connection pooling with pgBouncer
# - Monitoring with pg_exporter
# - Backup management with pg_basebackup

services:
  # PostgreSQL Primary
  postgres-primary:
    image: postgres:14-alpine
    container_name: luckygas-postgres-primary
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-luckygas}
      POSTGRES_USER: ${POSTGRES_USER:-luckygas}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:?Database password required}
      POSTGRES_REPLICATION_MODE: master
      POSTGRES_REPLICATION_USER: ${REPLICATION_USER:-replicator}
      POSTGRES_REPLICATION_PASSWORD: ${REPLICATION_PASSWORD:?Replication password required}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=zh_TW.UTF-8"
      PGDATA: /var/lib/postgresql/data/pgdata
      # Performance tuning
      POSTGRES_MAX_CONNECTIONS: 200
      POSTGRES_SHARED_BUFFERS: 256MB
      POSTGRES_EFFECTIVE_CACHE_SIZE: 1GB
      POSTGRES_MAINTENANCE_WORK_MEM: 64MB
      POSTGRES_CHECKPOINT_COMPLETION_TARGET: 0.9
      POSTGRES_WAL_BUFFERS: 16MB
      POSTGRES_DEFAULT_STATISTICS_TARGET: 100
      POSTGRES_RANDOM_PAGE_COST: 1.1
      POSTGRES_EFFECTIVE_IO_CONCURRENCY: 200
      POSTGRES_WORK_MEM: 4MB
      POSTGRES_MIN_WAL_SIZE: 1GB
      POSTGRES_MAX_WAL_SIZE: 4GB
    volumes:
      - postgres_primary_data:/var/lib/postgresql/data
      - ./deployment/postgres/primary/postgresql.conf:/etc/postgresql/postgresql.conf:ro
      - ./deployment/postgres/primary/pg_hba.conf:/etc/postgresql/pg_hba.conf:ro
      - ./deployment/postgres/scripts:/docker-entrypoint-initdb.d:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-luckygas} -d ${POSTGRES_DB:-luckygas}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - luckygas-ha-network

  # PostgreSQL Replica 1
  postgres-replica-1:
    image: postgres:14-alpine
    container_name: luckygas-postgres-replica-1
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-luckygas}
      POSTGRES_USER: ${POSTGRES_USER:-luckygas}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:?Database password required}
      POSTGRES_REPLICATION_MODE: slave
      POSTGRES_MASTER_SERVICE: postgres-primary
      POSTGRES_REPLICATION_USER: ${REPLICATION_USER:-replicator}
      POSTGRES_REPLICATION_PASSWORD: ${REPLICATION_PASSWORD:?Replication password required}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_replica1_data:/var/lib/postgresql/data
      - ./deployment/postgres/replica/postgresql.conf:/etc/postgresql/postgresql.conf:ro
      - ./deployment/postgres/replica/recovery.conf:/etc/postgresql/recovery.conf:ro
    depends_on:
      postgres-primary:
        condition: service_healthy
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-luckygas} -d ${POSTGRES_DB:-luckygas}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 60s
    networks:
      - luckygas-ha-network

  # PostgreSQL Replica 2 (for read scaling)
  postgres-replica-2:
    image: postgres:14-alpine
    container_name: luckygas-postgres-replica-2
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-luckygas}
      POSTGRES_USER: ${POSTGRES_USER:-luckygas}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:?Database password required}
      POSTGRES_REPLICATION_MODE: slave
      POSTGRES_MASTER_SERVICE: postgres-primary
      POSTGRES_REPLICATION_USER: ${REPLICATION_USER:-replicator}
      POSTGRES_REPLICATION_PASSWORD: ${REPLICATION_PASSWORD:?Replication password required}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_replica2_data:/var/lib/postgresql/data
      - ./deployment/postgres/replica/postgresql.conf:/etc/postgresql/postgresql.conf:ro
      - ./deployment/postgres/replica/recovery.conf:/etc/postgresql/recovery.conf:ro
    depends_on:
      postgres-primary:
        condition: service_healthy
    ports:
      - "5434:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-luckygas} -d ${POSTGRES_DB:-luckygas}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 60s
    networks:
      - luckygas-ha-network

  # pgBouncer - Connection Pooler
  pgbouncer:
    image: edoburu/pgbouncer:1.19.0
    container_name: luckygas-pgbouncer
    restart: unless-stopped
    environment:
      DATABASES_HOST: postgres-primary
      DATABASES_PORT: 5432
      DATABASES_USER: ${POSTGRES_USER:-luckygas}
      DATABASES_PASSWORD: ${POSTGRES_PASSWORD:?Database password required}
      DATABASES_DBNAME: ${POSTGRES_DB:-luckygas}
      POOL_MODE: transaction
      MAX_CLIENT_CONN: 1000
      DEFAULT_POOL_SIZE: 25
      MIN_POOL_SIZE: 10
      RESERVE_POOL_SIZE: 5
      RESERVE_POOL_TIMEOUT: 3
      SERVER_LIFETIME: 3600
      SERVER_IDLE_TIMEOUT: 600
      LOG_CONNECTIONS: 1
      LOG_DISCONNECTIONS: 1
      LOG_POOLER_ERRORS: 1
      STATS_PERIOD: 60
    volumes:
      - ./deployment/postgres/pgbouncer/pgbouncer.ini:/etc/pgbouncer/pgbouncer.ini:ro
      - ./deployment/postgres/pgbouncer/userlist.txt:/etc/pgbouncer/userlist.txt:ro
    depends_on:
      - postgres-primary
    ports:
      - "6432:6432"
    healthcheck:
      test: ["CMD-SHELL", "psql -h localhost -p 6432 -U ${POSTGRES_USER:-luckygas} -d pgbouncer -c 'SHOW POOLS;'"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - luckygas-ha-network

  # Repmgr - Replication Manager for automatic failover
  repmgr:
    image: bitnami/postgresql-repmgr:14
    container_name: luckygas-repmgr
    restart: unless-stopped
    environment:
      POSTGRESQL_USERNAME: ${POSTGRES_USER:-luckygas}
      POSTGRESQL_PASSWORD: ${POSTGRES_PASSWORD:?Database password required}
      POSTGRESQL_DATABASE: ${POSTGRES_DB:-luckygas}
      REPMGR_USERNAME: ${REPMGR_USER:-repmgr}
      REPMGR_PASSWORD: ${REPMGR_PASSWORD:?Repmgr password required}
      REPMGR_PRIMARY_HOST: postgres-primary
      REPMGR_PRIMARY_PORT: 5432
      REPMGR_PARTNER_NODES: postgres-primary:5432,postgres-replica-1:5432,postgres-replica-2:5432
      REPMGR_NODE_NAME: repmgr-1
      REPMGR_NODE_NETWORK_NAME: repmgr-1
      REPMGR_PORT_NUMBER: 5432
      REPMGR_LOG_LEVEL: INFO
      REPMGR_CONNECT_TIMEOUT: 5
      REPMGR_RECONNECT_ATTEMPTS: 3
      REPMGR_RECONNECT_INTERVAL: 5
    volumes:
      - repmgr_data:/bitnami/repmgr
    depends_on:
      - postgres-primary
      - postgres-replica-1
      - postgres-replica-2
    networks:
      - luckygas-ha-network

  # PostgreSQL Exporter for Prometheus monitoring
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:v0.13.0
    container_name: luckygas-postgres-exporter
    restart: unless-stopped
    environment:
      DATA_SOURCE_NAME: "postgresql://${POSTGRES_USER:-luckygas}:${POSTGRES_PASSWORD:?Database password required}@postgres-primary:5432/${POSTGRES_DB:-luckygas}?sslmode=disable"
      PG_EXPORTER_EXTEND_QUERY_PATH: "/etc/postgres_exporter/queries.yaml"
    volumes:
      - ./deployment/postgres/monitoring/queries.yaml:/etc/postgres_exporter/queries.yaml:ro
    depends_on:
      - postgres-primary
    ports:
      - "9187:9187"
    networks:
      - luckygas-ha-network

  # Backup service using pg_basebackup
  postgres-backup:
    image: postgres:14-alpine
    container_name: luckygas-postgres-backup
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-luckygas}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:?Database password required}
      POSTGRES_DB: ${POSTGRES_DB:-luckygas}
      BACKUP_SCHEDULE: "0 2 * * *"  # Daily at 2 AM
      BACKUP_RETENTION_DAYS: 7
      BACKUP_COMPRESSION: gzip
    volumes:
      - postgres_backup_data:/backups
      - ./deployment/postgres/backup/backup.sh:/usr/local/bin/backup.sh:ro
    command: >
      sh -c "chmod +x /usr/local/bin/backup.sh &&
             crond -f -l 2 &&
             echo '${BACKUP_SCHEDULE} /usr/local/bin/backup.sh' | crontab -"
    depends_on:
      - postgres-primary
    networks:
      - luckygas-ha-network

networks:
  luckygas-ha-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.22.0.0/16

volumes:
  postgres_primary_data:
    driver: local
  postgres_replica1_data:
    driver: local
  postgres_replica2_data:
    driver: local
  postgres_backup_data:
    driver: local
  repmgr_data:
    driver: local