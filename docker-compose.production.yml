version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:14-alpine
    container_name: luckygas-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: luckygas
      POSTGRES_USER: luckygas_user
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD:-luckygas_password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=zh_TW.UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/scripts/init.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U luckygas_user -d luckygas"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - luckygas-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: luckygas-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis_password} --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - luckygas-network

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        BUILD_DATE: ${BUILD_DATE:-$(date -u +'%Y-%m-%dT%H:%M:%SZ')}
        VCS_REF: ${VCS_REF:-$(git rev-parse --short HEAD)}
        VERSION: ${VERSION:-latest}
    container_name: luckygas-backend
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      # Application
      ENVIRONMENT: production
      DEBUG: "false"
      LOG_LEVEL: INFO
      
      # Database
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_NAME: luckygas
      DATABASE_USER: luckygas_user
      DATABASE_PASSWORD: ${DATABASE_PASSWORD:-luckygas_password}
      
      # Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_password}
      
      # Security
      SECRET_KEY: ${SECRET_KEY:-your-secret-key-here}
      
      # Google Cloud (mount credentials as volume)
      GOOGLE_APPLICATION_CREDENTIALS: /var/secrets/google/credentials.json
      
      # API Keys
      GOOGLE_MAPS_API_KEY: ${GOOGLE_MAPS_API_KEY}
      SMS_GATEWAY_API_KEY: ${SMS_GATEWAY_API_KEY}
      EINVOICE_APP_ID: ${EINVOICE_APP_ID}
      EINVOICE_API_KEY: ${EINVOICE_API_KEY}
      BANKING_API_KEY: ${BANKING_API_KEY}
    volumes:
      - ./backend/app:/app/app:ro
      - ./backend/alembic:/app/alembic:ro
      - backend_logs:/app/logs
      - ${GOOGLE_CREDENTIALS_FILE:-./secrets/google-credentials.json}:/var/secrets/google/credentials.json:ro
    ports:
      - "8000:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - luckygas-network

  # Frontend Web
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        BUILD_DATE: ${BUILD_DATE:-$(date -u +'%Y-%m-%dT%H:%M:%SZ')}
        VCS_REF: ${VCS_REF:-$(git rev-parse --short HEAD)}
        VERSION: ${VERSION:-latest}
    container_name: luckygas-frontend
    restart: unless-stopped
    depends_on:
      backend:
        condition: service_healthy
    ports:
      - "80:8080"
      - "443:8443"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - luckygas-network

  # Database Backup Service
  backup:
    image: postgres:14-alpine
    container_name: luckygas-backup
    restart: "no"
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      PGHOST: postgres
      PGPORT: 5432
      PGDATABASE: luckygas
      PGUSER: luckygas_user
      PGPASSWORD: ${DATABASE_PASSWORD:-luckygas_password}
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    command: ["/backup.sh"]
    profiles:
      - backup
    networks:
      - luckygas-network

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: luckygas-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    profiles:
      - monitoring
    networks:
      - luckygas-network

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: luckygas-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    ports:
      - "3000:3000"
    profiles:
      - monitoring
    networks:
      - luckygas-network

networks:
  luckygas-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local