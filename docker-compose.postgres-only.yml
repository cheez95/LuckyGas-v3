# PostgreSQL-only Docker Compose configuration for macOS
# This configuration avoids the common "Permission denied" errors by using named volumes

version: '3.8'

services:
  postgres:
    image: postgres:latest
    container_name: postgres_db
    restart: unless-stopped
    
    environment:
      # Database credentials
      POSTGRES_DB: myapp_db
      POSTGRES_USER: myapp_user
      POSTGRES_PASSWORD: secure_password_123
      
      # CRITICAL: This prevents permission issues on macOS
      # The PGDATA must point to a subdirectory within the volume mount
      PGDATA: /var/lib/postgresql/data/pgdata
    
    ports:
      - "5432:5432"
    
    volumes:
      # IMPORTANT: Use a named volume (postgres_data) NOT a bind mount (./data)
      # Named volumes are managed by Docker and have proper permissions
      # Bind mounts like ./data:/var/lib/postgresql/data cause permission errors on macOS
      - postgres_data:/var/lib/postgresql/data
    
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U myapp_user -d myapp_db"]
      interval: 10s
      timeout: 5s
      retries: 5

# Declare the named volume
# Docker manages this volume internally with correct permissions
volumes:
  postgres_data:
    # Optional: give the volume a specific name
    name: my_postgres_data

# Usage:
# 1. Start PostgreSQL: docker-compose -f docker-compose.postgres-only.yml up -d
# 2. Stop PostgreSQL: docker-compose -f docker-compose.postgres-only.yml down
# 3. Stop and remove data: docker-compose -f docker-compose.postgres-only.yml down -v