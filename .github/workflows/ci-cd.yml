name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '20.x'
  PYTHON_VERSION: '3.11'
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCP_REGION: asia-east1
  BACKEND_SERVICE_NAME: luckygas-backend
  FRONTEND_SERVICE_NAME: luckygas-frontend
  ARTIFACT_REGISTRY: asia-east1-docker.pkg.dev

jobs:
  # Frontend Tests
  frontend-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend

    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run lint
        run: npm run lint
      
      - name: Type check
        run: npx tsc --noEmit
      
      - name: Run unit tests
        run: npm test -- --coverage
        
      - name: Build application
        run: npm run build
        
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/dist

  # E2E Tests
  e2e-test:
    needs: frontend-test
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Install dependencies
        run: |
          cd frontend
          npm ci
          npx playwright install --with-deps
          
      - name: Run E2E tests
        run: |
          cd frontend
          npm run test:e2e
          
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: frontend/playwright-report/
          retention-days: 30

  # Backend Tests
  backend-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
        
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: luckygas
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: luckygas_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
          
      - name: Install dependencies
        run: |
          uv pip install -r requirements.txt
          uv pip install -r requirements-dev.txt
          
      - name: Run linter
        run: uv run ruff check .
        
      - name: Run type checker
        run: uv run mypy app
        
      - name: Run tests
        env:
          DATABASE_URL: postgresql://luckygas:testpass@localhost:5432/luckygas_test
          REDIS_URL: redis://localhost:6379
          SECRET_KEY: test-secret-key-for-ci
          FIRST_SUPERUSER_PASSWORD: TestPass123!
        run: |
          uv run pytest -v --cov=app --cov-report=xml
          
      - name: Upload coverage
        uses: codecov/codecov-action@v4
        with:
          file: ./backend/coverage.xml
          flags: backend

  # Security Scan
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Build and Push Docker Images
  build-and-push:
    needs: [frontend-test, backend-test]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      id-token: write
      
    steps:
      - uses: actions/checkout@v4
      
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        
      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker ${{ env.ARTIFACT_REGISTRY }}
          
      - name: Build and push Backend image
        run: |
          docker build -t ${{ env.ARTIFACT_REGISTRY }}/${{ env.GCP_PROJECT_ID }}/luckygas/${{ env.BACKEND_SERVICE_NAME }}:${{ github.sha }} ./backend
          docker tag ${{ env.ARTIFACT_REGISTRY }}/${{ env.GCP_PROJECT_ID }}/luckygas/${{ env.BACKEND_SERVICE_NAME }}:${{ github.sha }} \
                     ${{ env.ARTIFACT_REGISTRY }}/${{ env.GCP_PROJECT_ID }}/luckygas/${{ env.BACKEND_SERVICE_NAME }}:latest
          docker push ${{ env.ARTIFACT_REGISTRY }}/${{ env.GCP_PROJECT_ID }}/luckygas/${{ env.BACKEND_SERVICE_NAME }}:${{ github.sha }}
          docker push ${{ env.ARTIFACT_REGISTRY }}/${{ env.GCP_PROJECT_ID }}/luckygas/${{ env.BACKEND_SERVICE_NAME }}:latest
          
      - name: Build and push Frontend image
        run: |
          docker build -t ${{ env.ARTIFACT_REGISTRY }}/${{ env.GCP_PROJECT_ID }}/luckygas/${{ env.FRONTEND_SERVICE_NAME }}:${{ github.sha }} ./frontend
          docker tag ${{ env.ARTIFACT_REGISTRY }}/${{ env.GCP_PROJECT_ID }}/luckygas/${{ env.FRONTEND_SERVICE_NAME }}:${{ github.sha }} \
                     ${{ env.ARTIFACT_REGISTRY }}/${{ env.GCP_PROJECT_ID }}/luckygas/${{ env.FRONTEND_SERVICE_NAME }}:latest
          docker push ${{ env.ARTIFACT_REGISTRY }}/${{ env.GCP_PROJECT_ID }}/luckygas/${{ env.FRONTEND_SERVICE_NAME }}:${{ github.sha }}
          docker push ${{ env.ARTIFACT_REGISTRY }}/${{ env.GCP_PROJECT_ID }}/luckygas/${{ env.FRONTEND_SERVICE_NAME }}:latest

  # Deploy to Staging
  deploy-staging:
    needs: build-and-push
    if: github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    environment: staging
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        
      - name: Deploy Backend to Cloud Run
        run: |
          gcloud run deploy ${{ env.BACKEND_SERVICE_NAME }}-staging \
            --image ${{ env.ARTIFACT_REGISTRY }}/${{ env.GCP_PROJECT_ID }}/luckygas/${{ env.BACKEND_SERVICE_NAME }}:${{ github.sha }} \
            --region ${{ env.GCP_REGION }} \
            --platform managed \
            --allow-unauthenticated \
            --set-env-vars "ENVIRONMENT=staging"
            
      - name: Deploy Frontend to Cloud Run
        run: |
          gcloud run deploy ${{ env.FRONTEND_SERVICE_NAME }}-staging \
            --image ${{ env.ARTIFACT_REGISTRY }}/${{ env.GCP_PROJECT_ID }}/luckygas/${{ env.FRONTEND_SERVICE_NAME }}:${{ github.sha }} \
            --region ${{ env.GCP_REGION }} \
            --platform managed \
            --allow-unauthenticated

  # Deploy to Production
  deploy-production:
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        
      - name: Deploy Backend to Cloud Run
        run: |
          gcloud run deploy ${{ env.BACKEND_SERVICE_NAME }} \
            --image ${{ env.ARTIFACT_REGISTRY }}/${{ env.GCP_PROJECT_ID }}/luckygas/${{ env.BACKEND_SERVICE_NAME }}:${{ github.sha }} \
            --region ${{ env.GCP_REGION }} \
            --platform managed \
            --allow-unauthenticated \
            --set-env-vars "ENVIRONMENT=production" \
            --min-instances 1 \
            --max-instances 10 \
            --cpu 2 \
            --memory 4Gi
            
      - name: Deploy Frontend to Cloud Run
        run: |
          gcloud run deploy ${{ env.FRONTEND_SERVICE_NAME }} \
            --image ${{ env.ARTIFACT_REGISTRY }}/${{ env.GCP_PROJECT_ID }}/luckygas/${{ env.FRONTEND_SERVICE_NAME }}:${{ github.sha }} \
            --region ${{ env.GCP_REGION }} \
            --platform managed \
            --allow-unauthenticated \
            --min-instances 1 \
            --max-instances 20
            
      - name: Run smoke tests
        run: |
          # Add smoke test commands here
          echo "Running smoke tests..."