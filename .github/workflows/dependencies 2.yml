name: Dependency Updates

on:
  schedule:
    # Weekly on Monday at 3 AM Taiwan time (7 PM UTC Sunday)
    - cron: '0 19 * * 0'
  workflow_dispatch:

jobs:
  update-backend-dependencies:
    name: Update Backend Dependencies
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install uv
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
    
    - name: Update Dependencies
      working-directory: backend
      run: |
        # Create virtual environment
        uv venv
        source .venv/bin/activate
        
        # Install current dependencies
        uv pip install -r requirements.txt
        
        # Update dependencies
        uv pip install --upgrade -r requirements.txt
        
        # Generate updated requirements
        uv pip freeze > requirements.new.txt
        
        # Check for changes
        if ! diff -q requirements.txt requirements.new.txt > /dev/null; then
          echo "DEPENDENCIES_UPDATED=true" >> $GITHUB_ENV
          mv requirements.new.txt requirements.txt
        else
          echo "No backend dependency updates available"
        fi
    
    - name: Run Backend Tests
      if: env.DEPENDENCIES_UPDATED == 'true'
      working-directory: backend
      run: |
        source .venv/bin/activate
        uv pip install pytest pytest-asyncio httpx
        pytest tests/unit -v
    
    - name: Create Backend PR
      if: env.DEPENDENCIES_UPDATED == 'true'
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: "chore(backend): update Python dependencies"
        title: "chore(backend): Update Python Dependencies"
        body: |
          ## 🔄 Automated Dependency Update
          
          This PR updates Python dependencies to their latest versions.
          
          ### Changes
          See the updated `requirements.txt` for specific version changes.
          
          ### Testing
          - ✅ Unit tests passed
          - ⏳ Please review and run integration tests
          
          ### Security
          Please review for any security advisories in the updated packages.
          
          ---
          *This PR was automatically generated by the dependency update workflow.*
        branch: deps/backend-update-${{ github.run_number }}
        delete-branch: true

  update-frontend-dependencies:
    name: Update Frontend Dependencies
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
    
    - name: Update Dependencies
      working-directory: frontend
      run: |
        # Update dependencies
        npm update
        
        # Check for outdated packages
        npm outdated --json > outdated.json || true
        
        # Check for changes
        git diff --quiet package-lock.json || echo "DEPENDENCIES_UPDATED=true" >> $GITHUB_ENV
    
    - name: Security Audit
      if: env.DEPENDENCIES_UPDATED == 'true'
      working-directory: frontend
      run: |
        # Run security audit
        npm audit --json > audit.json || true
        
        # Check for high/critical vulnerabilities
        HIGH_VULNS=$(cat audit.json | jq '.metadata.vulnerabilities.high // 0')
        CRITICAL_VULNS=$(cat audit.json | jq '.metadata.vulnerabilities.critical // 0')
        
        if [ $HIGH_VULNS -gt 0 ] || [ $CRITICAL_VULNS -gt 0 ]; then
          echo "⚠️ Found $HIGH_VULNS high and $CRITICAL_VULNS critical vulnerabilities"
          npm audit fix --force
        fi
    
    - name: Run Frontend Tests
      if: env.DEPENDENCIES_UPDATED == 'true'
      working-directory: frontend
      run: |
        npm ci
        npm test -- --watchAll=false
        npm run build
    
    - name: Create Frontend PR
      if: env.DEPENDENCIES_UPDATED == 'true'
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: "chore(frontend): update npm dependencies"
        title: "chore(frontend): Update NPM Dependencies"
        body: |
          ## 🔄 Automated Dependency Update
          
          This PR updates NPM dependencies to their latest versions.
          
          ### Changes
          See the updated `package-lock.json` for specific version changes.
          
          ### Security
          Security vulnerabilities have been automatically fixed where possible.
          
          ### Testing
          - ✅ Unit tests passed
          - ✅ Build successful
          - ⏳ Please review and run E2E tests
          
          ---
          *This PR was automatically generated by the dependency update workflow.*
        branch: deps/frontend-update-${{ github.run_number }}
        delete-branch: true

  update-docker-base-images:
    name: Update Docker Base Images
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Check for Base Image Updates
      run: |
        # Backend Dockerfile
        cd backend
        CURRENT_PYTHON=$(grep "FROM python:" Dockerfile | cut -d: -f2)
        LATEST_PYTHON=$(docker run --rm gcr.io/google.com/cloudsdktool/cloud-sdk:slim gcloud container images list-tags python --filter="tags:3.11" --limit=1 --format="value(tags)")
        
        if [ "$CURRENT_PYTHON" != "$LATEST_PYTHON" ]; then
          sed -i "s/FROM python:${CURRENT_PYTHON}/FROM python:${LATEST_PYTHON}/" Dockerfile
          echo "BACKEND_IMAGE_UPDATED=true" >> $GITHUB_ENV
        fi
        
        # Frontend Dockerfile
        cd ../frontend
        CURRENT_NODE=$(grep "FROM node:" Dockerfile | head -1 | cut -d: -f2 | cut -d' ' -f1)
        LATEST_NODE=$(docker run --rm gcr.io/google.com/cloudsdktool/cloud-sdk:slim gcloud container images list-tags node --filter="tags:18" --limit=1 --format="value(tags)")
        
        if [ "$CURRENT_NODE" != "$LATEST_NODE" ]; then
          sed -i "s/FROM node:${CURRENT_NODE}/FROM node:${LATEST_NODE}/" Dockerfile
          echo "FRONTEND_IMAGE_UPDATED=true" >> $GITHUB_ENV
        fi
    
    - name: Build Test Images
      if: env.BACKEND_IMAGE_UPDATED == 'true' || env.FRONTEND_IMAGE_UPDATED == 'true'
      run: |
        if [ "$BACKEND_IMAGE_UPDATED" == "true" ]; then
          docker build -t luckygas-backend:test ./backend
        fi
        
        if [ "$FRONTEND_IMAGE_UPDATED" == "true" ]; then
          docker build -t luckygas-frontend:test ./frontend
        fi
    
    - name: Create Docker PR
      if: env.BACKEND_IMAGE_UPDATED == 'true' || env.FRONTEND_IMAGE_UPDATED == 'true'
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: "chore: update Docker base images"
        title: "chore: Update Docker Base Images"
        body: |
          ## 🔄 Automated Docker Base Image Update
          
          This PR updates Docker base images to their latest versions.
          
          ### Changes
          - Backend: ${{ env.BACKEND_IMAGE_UPDATED == 'true' && '✅ Updated' || '➖ No changes' }}
          - Frontend: ${{ env.FRONTEND_IMAGE_UPDATED == 'true' && '✅ Updated' || '➖ No changes' }}
          
          ### Testing
          - ✅ Images built successfully
          - ⏳ Please review and test in staging
          
          ---
          *This PR was automatically generated by the dependency update workflow.*
        branch: deps/docker-update-${{ github.run_number }}
        delete-branch: true

  dependency-report:
    name: Generate Dependency Report
    runs-on: ubuntu-latest
    needs: [update-backend-dependencies, update-frontend-dependencies, update-docker-base-images]
    if: always()
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Generate Report
      run: |
        cat > dependency-report.md << EOF
        # Dependency Update Report - $(date +%Y-%m-%d)
        
        ## Summary
        - Backend Dependencies: ${{ needs.update-backend-dependencies.result }}
        - Frontend Dependencies: ${{ needs.update-frontend-dependencies.result }}
        - Docker Base Images: ${{ needs.update-docker-base-images.result }}
        
        ## Actions Required
        Please review and merge any created pull requests.
        
        ## Next Steps
        1. Review dependency changes
        2. Run integration tests
        3. Deploy to staging for verification
        4. Merge if all tests pass
        EOF
        
        # Upload report
        mkdir -p reports
        cp dependency-report.md reports/
    
    - name: Upload Report
      uses: actions/upload-artifact@v3
      with:
        name: dependency-report
        path: reports/dependency-report.md