name: Deploy to Production

# Trigger on version tags
on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      skip_tests:
        description: 'Skip E2E tests (emergency deployment only)'
        required: false
        default: 'false'
        type: choice
        options:
          - 'false'
          - 'true'

env:
  GCP_PROJECT_ID: lucky-gas-prod
  GCP_REGION: asia-east1
  GKE_CLUSTER: luckygas-prod-cluster
  GKE_ZONE: asia-east1-a
  DOCKER_REGISTRY: gcr.io/lucky-gas-prod
  SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}

jobs:
  # Run E2E tests
  test:
    name: Run E2E Tests
    runs-on: ubuntu-latest
    if: github.event.inputs.skip_tests != 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: playwright-tests/package-lock.json
          
      - name: Install Playwright
        working-directory: playwright-tests
        run: |
          npm ci
          npx playwright install --with-deps
          
      - name: Start test environment
        run: |
          docker-compose -f docker-compose.test.yml up -d
          ./scripts/wait-for-services.sh
          
      - name: Run E2E tests
        working-directory: playwright-tests
        env:
          BASE_URL: http://localhost:3001
          API_BASE_URL: http://localhost:8000
        run: |
          npm run test:all
          
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: playwright-report
          path: playwright-tests/reports/
          retention-days: 7
          
      - name: Stop test environment
        if: always()
        run: docker-compose -f docker-compose.test.yml down

  # Build and push Docker images
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [test]
    if: always() && (needs.test.result == 'success' || github.event.inputs.skip_tests == 'true')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          
      - name: Configure Docker for GCR
        run: gcloud auth configure-docker
        
      - name: Get version
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        
      - name: Build and push frontend
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: |
            ${{ env.DOCKER_REGISTRY }}/frontend:${{ steps.version.outputs.VERSION }}
            ${{ env.DOCKER_REGISTRY }}/frontend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            REACT_APP_VERSION=${{ steps.version.outputs.VERSION }}
            
      - name: Build and push backend
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: |
            ${{ env.DOCKER_REGISTRY }}/backend:${{ steps.version.outputs.VERSION }}
            ${{ env.DOCKER_REGISTRY }}/backend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Scan images for vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.DOCKER_REGISTRY }}/backend:${{ steps.version.outputs.VERSION }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Deploy to production
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build]
    environment:
      name: production
      url: https://app.luckygas.com.tw
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        
      - name: Get GKE credentials
        run: |
          gcloud container clusters get-credentials ${{ env.GKE_CLUSTER }} \
            --zone ${{ env.GKE_ZONE }} \
            --project ${{ env.GCP_PROJECT_ID }}
            
      - name: Create deployment ID
        id: deployment
        run: echo "DEPLOYMENT_ID=$(date +%Y%m%d_%H%M%S)" >> $GITHUB_OUTPUT
        
      - name: Backup database
        run: |
          chmod +x deploy/backup-database.sh
          DEPLOYMENT_ID=${{ steps.deployment.outputs.DEPLOYMENT_ID }} \
          DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
          ./deploy/backup-database.sh
          
      - name: Run database migrations
        run: |
          chmod +x deploy/migrate-database.sh
          DEPLOYMENT_ID=${{ steps.deployment.outputs.DEPLOYMENT_ID }} \
          DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
          ./deploy/migrate-database.sh
          
      - name: Deploy using blue-green strategy
        run: |
          chmod +x deploy/blue-green-deploy.sh
          DEPLOYMENT_ID=${{ steps.deployment.outputs.DEPLOYMENT_ID }} \
          VERSION=${GITHUB_REF#refs/tags/} \
          ./deploy/blue-green-deploy.sh
          
      - name: Run health checks
        run: |
          chmod +x deploy/health-check.sh
          API_URL=https://api.luckygas.com.tw \
          FRONTEND_URL=https://app.luckygas.com.tw \
          ./deploy/health-check.sh
          
      - name: Run post-deployment validation
        run: |
          chmod +x deploy/post-deploy-validation.sh
          API_URL=https://api.luckygas.com.tw \
          FRONTEND_URL=https://app.luckygas.com.tw \
          TEST_PASSWORD=${{ secrets.TEST_USER_PASSWORD }} \
          ./deploy/post-deploy-validation.sh
          
      - name: Update monitoring
        run: |
          kubectl apply -f k8s/monitoring/
          kubectl rollout restart deployment/prometheus -n monitoring
          kubectl rollout restart deployment/grafana -n monitoring
          
      - name: Send success notification
        if: success()
        run: |
          curl -X POST ${{ env.SLACK_WEBHOOK }} \
            -H 'Content-Type: application/json' \
            -d '{
              "text": "🎉 LuckyGas Production Deployment Successful!",
              "attachments": [{
                "color": "good",
                "fields": [
                  {"title": "Version", "value": "'${GITHUB_REF#refs/tags/}'", "short": true},
                  {"title": "Deployment ID", "value": "'${{ steps.deployment.outputs.DEPLOYMENT_ID }}'", "short": true},
                  {"title": "Environment", "value": "Production", "short": true},
                  {"title": "URL", "value": "https://app.luckygas.com.tw", "short": true}
                ]
              }]
            }'

  # Rollback on failure
  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    needs: [deploy]
    if: failure()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        
      - name: Get GKE credentials
        run: |
          gcloud container clusters get-credentials ${{ env.GKE_CLUSTER }} \
            --zone ${{ env.GKE_ZONE }} \
            --project ${{ env.GCP_PROJECT_ID }}
            
      - name: Execute rollback
        run: |
          chmod +x deploy/rollback.sh
          DEPLOYMENT_ID=${{ needs.deploy.outputs.deployment_id }} \
          ./deploy/rollback.sh
          
      - name: Send rollback notification
        if: always()
        run: |
          curl -X POST ${{ env.SLACK_WEBHOOK }} \
            -H 'Content-Type: application/json' \
            -d '{
              "text": "⚠️ LuckyGas Production Deployment Failed - Rollback Executed",
              "attachments": [{
                "color": "danger",
                "fields": [
                  {"title": "Version", "value": "'${GITHUB_REF#refs/tags/}'", "short": true},
                  {"title": "Action", "value": "Automatic Rollback", "short": true},
                  {"title": "Status", "value": "System Stable", "short": true}
                ]
              }]
            }'

  # Create GitHub release
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [deploy]
    if: success()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Generate release notes
        id: release_notes
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          cat > release_notes.md <<EOF
          # LuckyGas $VERSION Release
          
          ## 🚀 Deployment Information
          - **Date**: $(date)
          - **Environment**: Production
          - **Status**: Successfully Deployed
          
          ## ✨ What's New
          $(git log $(git describe --tags --abbrev=0 HEAD^)..HEAD --pretty=format:"- %s" | grep -E "^- (feat|fix|perf|refactor):" || echo "- Various improvements and bug fixes")
          
          ## 📊 Test Results
          - E2E Tests: ✅ Passed (100+ scenarios)
          - Security Scan: ✅ Passed
          - Performance: ✅ < 2s API response time
          
          ## 🔗 Links
          - [Production App](https://app.luckygas.com.tw)
          - [API Documentation](https://api.luckygas.com.tw/docs)
          - [Deployment Guide](./DEPLOYMENT_GUIDE.md)
          
          ## 🏷️ Docker Images
          - Frontend: \`gcr.io/lucky-gas-prod/frontend:$VERSION\`
          - Backend: \`gcr.io/lucky-gas-prod/backend:$VERSION\`
          EOF
          
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          body_path: release_notes.md
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}