"""initial_complete_schema

Revision ID: 2c3d61a74090
Revises: 
Create Date: 2025-08-09 17:09:18.834089

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '2c3d61a74090'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('idx_audit_date_action'), table_name='audit_logs')
    op.drop_index(op.f('idx_audit_resource'), table_name='audit_logs')
    op.drop_index(op.f('idx_audit_user_action'), table_name='audit_logs')
    op.drop_index(op.f('ix_audit_logs_action'), table_name='audit_logs')
    op.drop_index(op.f('ix_audit_logs_id'), table_name='audit_logs')
    op.drop_index(op.f('ix_audit_logs_performed_at'), table_name='audit_logs')
    op.drop_index(op.f('ix_audit_logs_resource_type'), table_name='audit_logs')
    op.drop_index(op.f('ix_audit_logs_user_id'), table_name='audit_logs')
    op.drop_table('audit_logs')
    op.drop_index(op.f('ix_optimization_history_id'), table_name='optimization_history')
    op.drop_index(op.f('ix_optimization_history_optimization_id'), table_name='optimization_history')
    op.drop_table('optimization_history')
    op.drop_index(op.f('idx_evaluation_customer'), table_name='feature_flag_evaluations')
    op.drop_index(op.f('idx_evaluation_flag_time'), table_name='feature_flag_evaluations')
    op.drop_index(op.f('ix_feature_flag_evaluations_customer_id'), table_name='feature_flag_evaluations')
    op.drop_index(op.f('ix_feature_flag_evaluations_feature_flag_id'), table_name='feature_flag_evaluations')
    op.drop_index(op.f('ix_feature_flag_evaluations_timestamp'), table_name='feature_flag_evaluations')
    op.drop_index(op.f('ix_feature_flag_evaluations_user_id'), table_name='feature_flag_evaluations')
    op.drop_table('feature_flag_evaluations')
    op.drop_index(op.f('ix_order_templates_id'), table_name='order_templates')
    op.drop_index(op.f('ix_order_templates_template_code'), table_name='order_templates')
    op.drop_table('order_templates')
    op.drop_table('feature_flag_disabled_customers')
    op.drop_index(op.f('idx_sync_operations_batch'), table_name='sync_operations')
    op.drop_index(op.f('idx_sync_operations_entity'), table_name='sync_operations')
    op.drop_index(op.f('idx_sync_operations_retry'), table_name='sync_operations')
    op.drop_index(op.f('idx_sync_operations_status_priority'), table_name='sync_operations')
    op.drop_index(op.f('idx_sync_operations_transaction'), table_name='sync_operations')
    op.drop_index(op.f('ix_sync_operations_batch_id'), table_name='sync_operations')
    op.drop_index(op.f('ix_sync_operations_entity_id'), table_name='sync_operations')
    op.drop_index(op.f('ix_sync_operations_entity_type'), table_name='sync_operations')
    op.drop_index(op.f('ix_sync_operations_status'), table_name='sync_operations')
    op.drop_index(op.f('ix_sync_operations_transaction_id'), table_name='sync_operations')
    op.drop_table('sync_operations')
    op.drop_index(op.f('idx_feature_flags_schedule'), table_name='feature_flags')
    op.drop_index(op.f('idx_feature_flags_status'), table_name='feature_flags')
    op.drop_index(op.f('idx_feature_flags_type'), table_name='feature_flags')
    op.drop_index(op.f('ix_feature_flags_name'), table_name='feature_flags')
    op.drop_table('feature_flags')
    op.drop_table('sync_transactions')
    op.drop_index(op.f('idx_audit_action'), table_name='feature_flag_audits')
    op.drop_index(op.f('idx_audit_flag_timestamp'), table_name='feature_flag_audits')
    op.drop_index(op.f('idx_audit_user'), table_name='feature_flag_audits')
    op.drop_table('feature_flag_audits')
    op.drop_index(op.f('idx_variant_flag'), table_name='feature_flag_variants')
    op.drop_table('feature_flag_variants')
    op.drop_table('feature_flag_enabled_customers')
    op.drop_index(op.f('idx_webhook_provider_event'), table_name='webhook_logs')
    op.drop_index(op.f('idx_webhook_status_received'), table_name='webhook_logs')
    op.drop_index(op.f('idx_webhook_type_date'), table_name='webhook_logs')
    op.drop_index(op.f('ix_webhook_logs_id'), table_name='webhook_logs')
    op.drop_index(op.f('ix_webhook_logs_provider'), table_name='webhook_logs')
    op.drop_table('webhook_logs')
    op.drop_constraint(op.f('routes_driver_id_fkey'), 'routes', type_='foreignkey')
    op.create_foreign_key(None, 'routes', 'drivers', ['driver_id'], ['id'])
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'routes', type_='foreignkey')
    op.create_foreign_key(op.f('routes_driver_id_fkey'), 'routes', 'users', ['driver_id'], ['id'])
    op.create_table('webhook_logs',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('provider', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('event_id', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('event_type', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('payload', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('status', postgresql.ENUM('RECEIVED', 'PROCESSING', 'PROCESSED', 'FAILED', 'IGNORED', name='webhookstatus'), autoincrement=False, nullable=False),
    sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('received_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('processed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('ip_address', sa.VARCHAR(length=45), autoincrement=False, nullable=True),
    sa.Column('user_agent', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('signature_valid', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('response_status', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('response_body', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('processing_time_ms', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('retry_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('webhook_logs_pkey'))
    )
    op.create_index(op.f('ix_webhook_logs_provider'), 'webhook_logs', ['provider'], unique=False)
    op.create_index(op.f('ix_webhook_logs_id'), 'webhook_logs', ['id'], unique=False)
    op.create_index(op.f('idx_webhook_type_date'), 'webhook_logs', ['event_type', 'received_at'], unique=False)
    op.create_index(op.f('idx_webhook_status_received'), 'webhook_logs', ['status', 'received_at'], unique=False)
    op.create_index(op.f('idx_webhook_provider_event'), 'webhook_logs', ['provider', 'event_id'], unique=False)
    op.create_table('feature_flag_enabled_customers',
    sa.Column('feature_flag_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('customer_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('enabled_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('enabled_by', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['customer_id'], ['customers.id'], name=op.f('feature_flag_enabled_customers_customer_id_fkey')),
    sa.ForeignKeyConstraint(['enabled_by'], ['users.id'], name=op.f('feature_flag_enabled_customers_enabled_by_fkey')),
    sa.ForeignKeyConstraint(['feature_flag_id'], ['feature_flags.id'], name=op.f('feature_flag_enabled_customers_feature_flag_id_fkey')),
    sa.UniqueConstraint('feature_flag_id', 'customer_id', name=op.f('uq_flag_customer_enabled'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('feature_flag_variants',
    sa.Column('id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('feature_flag_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('percentage', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('config', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('is_default', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('assignment_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('conversion_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['feature_flag_id'], ['feature_flags.id'], name=op.f('feature_flag_variants_feature_flag_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('feature_flag_variants_pkey')),
    sa.UniqueConstraint('feature_flag_id', 'name', name=op.f('uq_flag_variant_name'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('idx_variant_flag'), 'feature_flag_variants', ['feature_flag_id'], unique=False)
    op.create_table('feature_flag_audits',
    sa.Column('id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('feature_flag_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('action', postgresql.ENUM('LOGIN', 'LOGOUT', 'LOGIN_FAILED', 'PASSWORD_CHANGE', 'PASSWORD_RESET', 'CREATE', 'READ', 'UPDATE', 'DELETE', 'PAYMENT_CREATED', 'PAYMENT_CONFIRMED', 'PAYMENT_FAILED', 'PAYMENT_REFUNDED', 'WEBHOOK_RECEIVED', 'WEBHOOK_PROCESSED', 'WEBHOOK_FAILED', 'API_CALL', 'API_ERROR', 'PERMISSION_GRANTED', 'PERMISSION_REVOKED', 'SECURITY_ALERT', 'SYSTEM_CONFIG_CHANGE', 'BACKUP_CREATED', 'MAINTENANCE_MODE', name='auditaction'), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('timestamp', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('old_value', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('new_value', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('details', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('ip_address', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('user_agent', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('request_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['feature_flag_id'], ['feature_flags.id'], name=op.f('feature_flag_audits_feature_flag_id_fkey')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('feature_flag_audits_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('feature_flag_audits_pkey'))
    )
    op.create_index(op.f('idx_audit_user'), 'feature_flag_audits', ['user_id'], unique=False)
    op.create_index(op.f('idx_audit_flag_timestamp'), 'feature_flag_audits', ['feature_flag_id', 'timestamp'], unique=False)
    op.create_index(op.f('idx_audit_action'), 'feature_flag_audits', ['action'], unique=False)
    op.create_table('sync_transactions',
    sa.Column('id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('status', postgresql.ENUM('PENDING', 'IN_PROGRESS', 'COMPLETED', 'FAILED', 'CONFLICT', 'RETRY', 'CANCELLED', name='syncstatus'), autoincrement=False, nullable=False),
    sa.Column('operations_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('completed_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('failed_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('atomic', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('stop_on_error', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('timeout_seconds', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('started_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('completed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name=op.f('sync_transactions_created_by_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('sync_transactions_pkey'))
    )
    op.create_table('feature_flags',
    sa.Column('id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('type', postgresql.ENUM('BOOLEAN', 'PERCENTAGE', 'VARIANT', 'CUSTOMER_LIST', name='featureflagtype'), autoincrement=False, nullable=False),
    sa.Column('status', postgresql.ENUM('ACTIVE', 'INACTIVE', 'SCHEDULED', 'ARCHIVED', name='featureflagstatus'), autoincrement=False, nullable=False),
    sa.Column('enabled', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('percentage', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('start_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('end_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('tags', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('config', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('evaluation_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('last_evaluated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name='feature_flags_created_by_fkey'),
    sa.ForeignKeyConstraint(['updated_by'], ['users.id'], name='feature_flags_updated_by_fkey'),
    sa.PrimaryKeyConstraint('id', name='feature_flags_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('ix_feature_flags_name'), 'feature_flags', ['name'], unique=True)
    op.create_index(op.f('idx_feature_flags_type'), 'feature_flags', ['type'], unique=False)
    op.create_index(op.f('idx_feature_flags_status'), 'feature_flags', ['status'], unique=False)
    op.create_index(op.f('idx_feature_flags_schedule'), 'feature_flags', ['start_date', 'end_date'], unique=False)
    op.create_table('sync_operations',
    sa.Column('id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('entity_type', postgresql.ENUM('CUSTOMER', 'ORDER', 'DELIVERY', 'PRODUCT', 'DRIVER', name='entitytype'), autoincrement=False, nullable=False),
    sa.Column('entity_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('entity_version', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('direction', postgresql.ENUM('TO_LEGACY', 'FROM_LEGACY', 'BIDIRECTIONAL', name='syncdirection'), autoincrement=False, nullable=False),
    sa.Column('priority', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('status', postgresql.ENUM('PENDING', 'IN_PROGRESS', 'COMPLETED', 'FAILED', 'CONFLICT', 'RETRY', 'CANCELLED', name='syncstatus'), autoincrement=False, nullable=False),
    sa.Column('retry_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('max_retries', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('legacy_data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('original_data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('resolved_data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('conflict_detected', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('conflict_resolution', postgresql.ENUM('NEWEST_WINS', 'LEGACY_WINS', 'NEW_SYSTEM_WINS', 'MANUAL', 'AUTO_MERGED', name='conflictresolution'), autoincrement=False, nullable=True),
    sa.Column('conflict_details', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('resolved_by', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('resolved_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('error_details', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('last_error_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('transaction_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('depends_on', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('batch_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('started_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('completed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('next_retry_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('sync_duration_ms', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('data_size_bytes', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name=op.f('sync_operations_created_by_fkey')),
    sa.ForeignKeyConstraint(['resolved_by'], ['users.id'], name=op.f('sync_operations_resolved_by_fkey')),
    sa.ForeignKeyConstraint(['updated_by'], ['users.id'], name=op.f('sync_operations_updated_by_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('sync_operations_pkey')),
    sa.UniqueConstraint('entity_type', 'entity_id', 'transaction_id', name=op.f('uq_entity_transaction'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('ix_sync_operations_transaction_id'), 'sync_operations', ['transaction_id'], unique=False)
    op.create_index(op.f('ix_sync_operations_status'), 'sync_operations', ['status'], unique=False)
    op.create_index(op.f('ix_sync_operations_entity_type'), 'sync_operations', ['entity_type'], unique=False)
    op.create_index(op.f('ix_sync_operations_entity_id'), 'sync_operations', ['entity_id'], unique=False)
    op.create_index(op.f('ix_sync_operations_batch_id'), 'sync_operations', ['batch_id'], unique=False)
    op.create_index(op.f('idx_sync_operations_transaction'), 'sync_operations', ['transaction_id'], unique=False)
    op.create_index(op.f('idx_sync_operations_status_priority'), 'sync_operations', ['status', 'priority'], unique=False)
    op.create_index(op.f('idx_sync_operations_retry'), 'sync_operations', ['status', 'next_retry_at'], unique=False)
    op.create_index(op.f('idx_sync_operations_entity'), 'sync_operations', ['entity_type', 'entity_id'], unique=False)
    op.create_index(op.f('idx_sync_operations_batch'), 'sync_operations', ['batch_id'], unique=False)
    op.create_table('feature_flag_disabled_customers',
    sa.Column('feature_flag_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('customer_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('disabled_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('disabled_by', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['customer_id'], ['customers.id'], name=op.f('feature_flag_disabled_customers_customer_id_fkey')),
    sa.ForeignKeyConstraint(['disabled_by'], ['users.id'], name=op.f('feature_flag_disabled_customers_disabled_by_fkey')),
    sa.ForeignKeyConstraint(['feature_flag_id'], ['feature_flags.id'], name=op.f('feature_flag_disabled_customers_feature_flag_id_fkey')),
    sa.UniqueConstraint('feature_flag_id', 'customer_id', name=op.f('uq_flag_customer_disabled'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('order_templates',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('template_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('template_code', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('customer_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('products', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('delivery_notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('priority', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('payment_method', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('is_recurring', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('recurrence_pattern', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('recurrence_interval', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('recurrence_days', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('next_scheduled_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('times_used', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('last_used_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name=op.f('order_templates_created_by_fkey')),
    sa.ForeignKeyConstraint(['customer_id'], ['customers.id'], name=op.f('order_templates_customer_id_fkey')),
    sa.ForeignKeyConstraint(['updated_by'], ['users.id'], name=op.f('order_templates_updated_by_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('order_templates_pkey'))
    )
    op.create_index(op.f('ix_order_templates_template_code'), 'order_templates', ['template_code'], unique=True)
    op.create_index(op.f('ix_order_templates_id'), 'order_templates', ['id'], unique=False)
    op.create_table('feature_flag_evaluations',
    sa.Column('id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('feature_flag_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('customer_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('timestamp', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('enabled', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('variant', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('reason', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('attributes', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('evaluation_time_ms', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['customer_id'], ['customers.id'], name=op.f('feature_flag_evaluations_customer_id_fkey')),
    sa.ForeignKeyConstraint(['feature_flag_id'], ['feature_flags.id'], name=op.f('feature_flag_evaluations_feature_flag_id_fkey')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('feature_flag_evaluations_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('feature_flag_evaluations_pkey'))
    )
    op.create_index(op.f('ix_feature_flag_evaluations_user_id'), 'feature_flag_evaluations', ['user_id'], unique=False)
    op.create_index(op.f('ix_feature_flag_evaluations_timestamp'), 'feature_flag_evaluations', ['timestamp'], unique=False)
    op.create_index(op.f('ix_feature_flag_evaluations_feature_flag_id'), 'feature_flag_evaluations', ['feature_flag_id'], unique=False)
    op.create_index(op.f('ix_feature_flag_evaluations_customer_id'), 'feature_flag_evaluations', ['customer_id'], unique=False)
    op.create_index(op.f('idx_evaluation_flag_time'), 'feature_flag_evaluations', ['feature_flag_id', 'timestamp'], unique=False)
    op.create_index(op.f('idx_evaluation_customer'), 'feature_flag_evaluations', ['customer_id', 'timestamp'], unique=False)
    op.create_table('optimization_history',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('optimization_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('request_data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('response_data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('optimization_mode', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('total_orders', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('total_routes', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('total_distance_km', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('total_cost', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('savings_percentage', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('optimization_time_ms', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('success', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('error_message', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('optimization_history_pkey'))
    )
    op.create_index(op.f('ix_optimization_history_optimization_id'), 'optimization_history', ['optimization_id'], unique=True)
    op.create_index(op.f('ix_optimization_history_id'), 'optimization_history', ['id'], unique=False)
    op.create_table('audit_logs',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('ip_address', sa.VARCHAR(length=45), autoincrement=False, nullable=True),
    sa.Column('user_agent', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('action', postgresql.ENUM('LOGIN', 'LOGOUT', 'LOGIN_FAILED', 'PASSWORD_CHANGE', 'PASSWORD_RESET', 'CREATE', 'READ', 'UPDATE', 'DELETE', 'PAYMENT_CREATED', 'PAYMENT_CONFIRMED', 'PAYMENT_FAILED', 'PAYMENT_REFUNDED', 'WEBHOOK_RECEIVED', 'WEBHOOK_PROCESSED', 'WEBHOOK_FAILED', 'API_CALL', 'API_ERROR', 'PERMISSION_GRANTED', 'PERMISSION_REVOKED', 'SECURITY_ALERT', 'SYSTEM_CONFIG_CHANGE', 'BACKUP_CREATED', 'MAINTENANCE_MODE', name='auditaction'), autoincrement=False, nullable=False),
    sa.Column('resource_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('resource_id', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('details', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('old_values', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('new_values', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('performed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('success', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('audit_logs_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('audit_logs_pkey'))
    )
    op.create_index(op.f('ix_audit_logs_user_id'), 'audit_logs', ['user_id'], unique=False)
    op.create_index(op.f('ix_audit_logs_resource_type'), 'audit_logs', ['resource_type'], unique=False)
    op.create_index(op.f('ix_audit_logs_performed_at'), 'audit_logs', ['performed_at'], unique=False)
    op.create_index(op.f('ix_audit_logs_id'), 'audit_logs', ['id'], unique=False)
    op.create_index(op.f('ix_audit_logs_action'), 'audit_logs', ['action'], unique=False)
    op.create_index(op.f('idx_audit_user_action'), 'audit_logs', ['user_id', 'action'], unique=False)
    op.create_index(op.f('idx_audit_resource'), 'audit_logs', ['resource_type', 'resource_id'], unique=False)
    op.create_index(op.f('idx_audit_date_action'), 'audit_logs', ['performed_at', 'action'], unique=False)
    # ### end Alembic commands ###
