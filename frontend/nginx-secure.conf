server {
    listen 80;
    server_name localhost;
    root /usr/share/nginx/html;
    index index.html;

    # Compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied expired no-cache no-store private auth;
    gzip_types text/plain text/css text/xml text/javascript application/javascript application/xml+rss application/json;
    gzip_disable "MSIE [1-6]\.";

    # Enhanced Security Headers
    add_header X-Frame-Options "DENY" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Permissions-Policy "camera=(), microphone=(), geolocation=(self), payment=()" always;
    
    # Strict Transport Security (enable when using HTTPS)
    # add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    
    # Content Security Policy - Enhanced with proper directives
    set $csp "default-src 'self'; ";
    set $csp "${csp}script-src 'self' 'unsafe-inline' 'unsafe-eval' https://maps.googleapis.com https://maps.gstatic.com; ";
    set $csp "${csp}style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; ";
    set $csp "${csp}img-src 'self' data: blob: https: http:; ";
    set $csp "${csp}font-src 'self' data: https://fonts.gstatic.com; ";
    set $csp "${csp}connect-src 'self' ws: wss: https://maps.googleapis.com https://*.googleapis.com; ";
    set $csp "${csp}media-src 'none'; ";
    set $csp "${csp}object-src 'none'; ";
    set $csp "${csp}child-src 'self'; ";
    set $csp "${csp}frame-src 'self' https://maps.google.com; ";
    set $csp "${csp}frame-ancestors 'none'; ";
    set $csp "${csp}form-action 'self'; ";
    set $csp "${csp}base-uri 'self'; ";
    set $csp "${csp}manifest-src 'self'; ";
    set $csp "${csp}upgrade-insecure-requests;";
    
    add_header Content-Security-Policy $csp always;
    
    # Report-Only CSP for testing (uncomment to test without breaking functionality)
    # add_header Content-Security-Policy-Report-Only $csp always;

    # Security headers for API responses
    location /api/ {
        # Remove CSP for API endpoints (not needed for JSON)
        add_header X-Frame-Options "DENY" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        
        # CORS headers (adjust origin as needed)
        add_header Access-Control-Allow-Origin "$http_origin" always;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Authorization, Content-Type, X-Requested-With" always;
        add_header Access-Control-Allow-Credentials "true" always;
        add_header Access-Control-Max-Age "86400" always;
        
        # Handle preflight requests
        if ($request_method = 'OPTIONS') {
            return 204;
        }
        
        proxy_pass http://backend:8000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
        
        # Timeouts
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
        
        # Security: Hide backend server info
        proxy_hide_header X-Powered-By;
        proxy_hide_header Server;
    }

    # WebSocket proxy with security
    location /ws {
        # Minimal headers for WebSocket
        add_header X-Frame-Options "DENY" always;
        add_header X-Content-Type-Options "nosniff" always;
        
        proxy_pass http://backend:8000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # WebSocket timeouts
        proxy_read_timeout 86400;
        
        # Security
        proxy_hide_header X-Powered-By;
        proxy_hide_header Server;
    }

    # Cache static assets with security headers
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        
        # Security headers for static assets
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-Frame-Options "DENY" always;
    }

    # Block access to sensitive files
    location ~ /\. {
        deny all;
        return 404;
    }
    
    location ~ \.(env|git|gitignore|dockerignore|editorconfig|yml|yaml|toml|lock|md)$ {
        deny all;
        return 404;
    }

    # React Router support
    location / {
        try_files $uri $uri/ /index.html;
        
        # Security headers for HTML
        add_header X-Frame-Options "DENY" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        add_header Content-Security-Policy $csp always;
    }

    # Health check endpoint
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
        
        # Minimal security headers
        add_header X-Content-Type-Options "nosniff" always;
    }
    
    # Security monitoring endpoint (internal only)
    location /nginx-status {
        stub_status on;
        access_log off;
        
        # Only allow from internal IPs
        allow 127.0.0.1;
        allow 10.0.0.0/8;
        allow 172.16.0.0/12;
        allow 192.168.0.0/16;
        deny all;
    }
}

# HTTPS configuration (uncomment when SSL is configured)
# server {
#     listen 443 ssl http2;
#     server_name localhost;
#     
#     ssl_certificate /etc/nginx/ssl/cert.pem;
#     ssl_certificate_key /etc/nginx/ssl/key.pem;
#     
#     # Modern SSL configuration
#     ssl_protocols TLSv1.2 TLSv1.3;
#     ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;
#     ssl_prefer_server_ciphers off;
#     
#     # SSL session caching
#     ssl_session_cache shared:SSL:10m;
#     ssl_session_timeout 10m;
#     
#     # OCSP stapling
#     ssl_stapling on;
#     ssl_stapling_verify on;
#     
#     # Include all other configuration from port 80
#     # ... (copy all location blocks and other settings)
# }